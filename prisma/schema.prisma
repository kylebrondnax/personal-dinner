generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  password              String?
  name                  String
  role                  UserRole               @default(ATTENDEE)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  availabilityResponses AvailabilityResponse[]
  events                Event[]                @relation("ChefEvents")
  reservations          Reservation[]
  reviews               Review[]
  profile               UserProfile?

  @@map("users")
}

model UserProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  phoneNumber         String?
  avatarUrl           String?
  dietaryRestrictions String?
  preferredCuisines   String?
  maxBudget           Float?
  venmoUsername       String?
  venmoLink           String?
  bio                 String?
  cookingStyle        String?
  city                String?
  neighborhood        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Event {
  id                     String                 @id @default(cuid())
  title                  String
  description            String?
  date                   DateTime
  duration               Int
  maxCapacity            Int
  status                 EventStatus            @default(OPEN)
  estimatedCostPerPerson Float
  actualCostPerPerson    Float?
  chefId                 String
  cuisineTypes           String?
  dietaryAccommodations  String?
  reservationDeadline    DateTime
  allowWaitlist          Boolean                @default(true)
  useAvailabilityPoll    Boolean                @default(false)
  pollStatus             PollStatus?
  pollDeadline           DateTime?
  finalizedDate          DateTime?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  availabilityResponses  AvailabilityResponse[]
  ingredients            EventIngredient[]
  location               EventLocation?
  chef                   User                   @relation("ChefEvents", fields: [chefId], references: [id])
  proposedDates          ProposedDate[]
  receipts               Receipt[]
  reservations           Reservation[]
  reviews                Review[]

  @@map("events")
}

model EventLocation {
  id              String  @id @default(cuid())
  eventId         String  @unique
  address         String?
  neighborhood    String
  city            String
  state           String?
  zipCode         String?
  showFullAddress Boolean @default(false)
  event           Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_locations")
}

model EventIngredient {
  id            String   @id @default(cuid())
  eventId       String
  name          String
  estimatedCost Float
  actualCost    Float?
  category      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_ingredients")
}

model Reservation {
  id                  String            @id @default(cuid())
  eventId             String
  userId              String?
  status              ReservationStatus @default(CONFIRMED)
  guestCount          Int               @default(1)
  dietaryRestrictions String?
  specialRequests     String?
  guestName           String?
  guestEmail          String?
  phoneNumber         String?
  amountOwed          Float?
  amountPaid          Float             @default(0)
  paidAt              DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  event               Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("reservations")
}

model ProposedDate {
  id        String                 @id @default(cuid())
  eventId   String
  date      DateTime
  time      String
  createdAt DateTime               @default(now())
  responses AvailabilityResponse[]
  event     Event                  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("proposed_dates")
}

model AvailabilityResponse {
  id             String       @id @default(cuid())
  eventId        String
  proposedDateId String
  userId         String?
  guestEmail     String?
  guestName      String?
  available      Boolean
  tentative      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  event          Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  proposedDate   ProposedDate @relation(fields: [proposedDateId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@unique([proposedDateId, userId])
  @@unique([proposedDateId, guestEmail])
  @@map("availability_responses")
}

model Receipt {
  id          String   @id @default(cuid())
  eventId     String
  filename    String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  ocrText     String?
  parsedItems Json?
  processed   Boolean  @default(false)
  uploadedAt  DateTime @default(now())
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model Review {
  id            String   @id @default(cuid())
  eventId       String
  userId        String
  overallRating Int
  foodRating    Int
  hostRating    Int
  valueRating   Int
  title         String?
  content       String?
  photos        String?
  approved      Boolean  @default(false)
  flagged       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("reviews")
}

enum UserRole {
  CHEF
  ATTENDEE
  ADMIN
}

enum EventStatus {
  DRAFT
  POLL_ACTIVE
  POLL_CLOSED
  OPEN
  FULL
  CANCELLED
  COMPLETED
}

enum PollStatus {
  ACTIVE
  CLOSED
  FINALIZED
}

enum ReservationStatus {
  CONFIRMED
  WAITLIST
  CANCELLED
}
